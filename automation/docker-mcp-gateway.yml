---
# Ansible Playbook for Docker MCP Gateway Deployment
# Alternative to Terraform module for teams preferring Ansible
#
# Usage:
#   ansible-playbook -i inventory.yml docker-mcp-gateway.yml
#
# Variables can be overridden in group_vars/all.yml or via -e flag

- name: Deploy Docker MCP Gateway
  hosts: localhost
  gather_facts: false
  connection: local
  
  vars:
    # Default configuration - override in group_vars/all.yml
    project_name: homelab
    environment: production
    namespace: homelab
    
    # Docker MCP Gateway configuration
    docker_mcp_gateway:
      enabled: false  # Set to true to deploy
      replicas: 1
      image: alpine:3.19
      port: 8080
      cpu_limit: 500m
      memory_limit: 512Mi
      log_level: info
      docker_timeout: 30
      
      # External access
      tunnel_hostname: docker-mcp
      domain_suffix: "{{ domain_suffix | default('') }}"
      
      # Security
      enable_docker_socket: true
      enable_network_policy: false
      
      # Monitoring
      enable_metrics: false
      enable_health_checks: true
    
    # Kubernetes configuration
    kubeconfig: "{{ ansible_env.HOME }}/.kube/config"
    kubectl_context: docker-desktop

  tasks:
    - name: Check if Docker MCP Gateway is enabled
      ansible.builtin.debug:
        msg: "Docker MCP Gateway deployment is {{ 'enabled' if docker_mcp_gateway.enabled else 'disabled' }}"

    - name: End play if Docker MCP Gateway is disabled
      ansible.builtin.meta: end_play
      when: not docker_mcp_gateway.enabled

    - name: Ensure namespace exists
      kubernetes.core.k8s:
        name: "{{ namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: "{{ kubeconfig }}"
        context: "{{ kubectl_context }}"

    - name: Create Docker MCP Gateway configuration
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "{{ project_name }}-docker-mcp-config"
            namespace: "{{ namespace }}"
            labels:
              app: docker-mcp-gateway
              project: "{{ project_name }}"
              environment: "{{ environment }}"
          data:
            config.json: |
              {
                "server": {
                  "name": "docker-mcp-gateway",
                  "version": "1.0.0",
                  "description": "Docker MCP Gateway for remote Docker operations"
                },
                "logging": {
                  "level": "{{ docker_mcp_gateway.log_level }}"
                },
                "docker": {
                  "socket_path": "/var/run/docker.sock",
                  "timeout": {{ docker_mcp_gateway.docker_timeout }}
                }
              }
        state: present
        kubeconfig: "{{ kubeconfig }}"
        context: "{{ kubectl_context }}"

    - name: Create Docker MCP Gateway service account
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: "{{ project_name }}-docker-mcp-gateway"
            namespace: "{{ namespace }}"
            labels:
              app: docker-mcp-gateway
              project: "{{ project_name }}"
              environment: "{{ environment }}"
          automountServiceAccountToken: false
        state: present
        kubeconfig: "{{ kubeconfig }}"
        context: "{{ kubectl_context }}"

    - name: Deploy Docker MCP Gateway
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: "{{ project_name }}-docker-mcp-gateway"
            namespace: "{{ namespace }}"
            labels:
              app: docker-mcp-gateway
              project: "{{ project_name }}"
              environment: "{{ environment }}"
          spec:
            replicas: "{{ docker_mcp_gateway.replicas }}"
            selector:
              matchLabels:
                app: docker-mcp-gateway
                project: "{{ project_name }}"
                environment: "{{ environment }}"
            template:
              metadata:
                labels:
                  app: docker-mcp-gateway
                  project: "{{ project_name }}"
                  environment: "{{ environment }}"
              spec:
                securityContext:
                  runAsUser: 1000
                  runAsGroup: 1000
                  fsGroup: 999
                serviceAccountName: "{{ project_name }}-docker-mcp-gateway"
                automountServiceAccountToken: false
                nodeSelector:
                  kubernetes.io/os: linux
                containers:
                - name: docker-mcp-gateway
                  image: "{{ docker_mcp_gateway.image }}"
                  command: ["/bin/sh"]
                  args:
                  - "-c"
                  - |
                    # Install Docker CLI in container
                    if ! command -v docker &> /dev/null; then
                      echo "Installing Docker CLI..."
                      apk add --no-cache docker-cli
                    fi
                    
                    # Start Docker MCP gateway
                    echo "Starting Docker MCP Gateway..."
                    exec docker mcp gateway run --config /config/config.json --listen 0.0.0.0:{{ docker_mcp_gateway.port }}
                  ports:
                  - name: mcp-port
                    containerPort: "{{ docker_mcp_gateway.port }}"
                    protocol: TCP
                  env:
                  - name: MCP_SERVER_NAME
                    value: docker-mcp-gateway
                  - name: LOG_LEVEL
                    value: "{{ docker_mcp_gateway.log_level }}"
                  - name: DOCKER_HOST
                    value: unix:///var/run/docker.sock
                  resources:
                    limits:
                      cpu: "{{ docker_mcp_gateway.cpu_limit }}"
                      memory: "{{ docker_mcp_gateway.memory_limit }}"
                    requests:
                      cpu: 100m
                      memory: 128Mi
                  volumeMounts:
                  - name: docker-socket
                    mountPath: /var/run/docker.sock
                    readOnly: false
                  - name: config
                    mountPath: /config
                    readOnly: true
                  securityContext:
                    allowPrivilegeEscalation: false
                    readOnlyRootFilesystem: false
                    runAsNonRoot: false
                    capabilities:
                      drop: ["ALL"]
                      add: ["CHOWN", "SETUID", "SETGID"]
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: "{{ docker_mcp_gateway.port }}"
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                  readinessProbe:
                    httpGet:
                      path: /ready
                      port: "{{ docker_mcp_gateway.port }}"
                    initialDelaySeconds: 5
                    periodSeconds: 5
                    timeoutSeconds: 3
                    failureThreshold: 3
                volumes:
                - name: docker-socket
                  hostPath:
                    path: /var/run/docker.sock
                    type: Socket
                - name: config
                  configMap:
                    name: "{{ project_name }}-docker-mcp-config"
        state: present
        kubeconfig: "{{ kubeconfig }}"
        context: "{{ kubectl_context }}"

    - name: Create Docker MCP Gateway service
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ project_name }}-docker-mcp-gateway"
            namespace: "{{ namespace }}"
            labels:
              app: docker-mcp-gateway
              project: "{{ project_name }}"
              environment: "{{ environment }}"
          spec:
            selector:
              app: docker-mcp-gateway
              project: "{{ project_name }}"
              environment: "{{ environment }}"
            ports:
            - name: mcp-port
              protocol: TCP
              port: "{{ docker_mcp_gateway.port }}"
              targetPort: "{{ docker_mcp_gateway.port }}"
            type: ClusterIP
        state: present
        kubeconfig: "{{ kubeconfig }}"
        context: "{{ kubectl_context }}"

    - name: Create network policy (if enabled)
      kubernetes.core.k8s:
        definition:
          apiVersion: networking.k8s.io/v1
          kind: NetworkPolicy
          metadata:
            name: "{{ project_name }}-docker-mcp-gateway"
            namespace: "{{ namespace }}"
          spec:
            podSelector:
              matchLabels:
                app: docker-mcp-gateway
                project: "{{ project_name }}"
                environment: "{{ environment }}"
            policyTypes: ["Ingress", "Egress"]
            ingress:
            - from:
              - namespaceSelector:
                  matchLabels:
                    name: "{{ namespace }}"
            egress:
            - to:
              - namespaceSelector:
                  matchLabels:
                    name: kube-system
              ports:
              - port: 53
                protocol: UDP
            - to: []
              ports:
              - port: 2375
                protocol: TCP
              - port: 2376
                protocol: TCP
              - port: 443
                protocol: TCP
        state: present
        kubeconfig: "{{ kubeconfig }}"
        context: "{{ kubectl_context }}"
      when: docker_mcp_gateway.enable_network_policy | default(false)

    - name: Wait for deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ project_name }}-docker-mcp-gateway"
        namespace: "{{ namespace }}"
        kubeconfig: "{{ kubeconfig }}"
        context: "{{ kubectl_context }}"
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300

    - name: Get service information
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: "{{ project_name }}-docker-mcp-gateway"
        namespace: "{{ namespace }}"
        kubeconfig: "{{ kubeconfig }}"
        context: "{{ kubectl_context }}"
      register: service_info

    - name: Display deployment information
      ansible.builtin.debug:
        msg: |
          Docker MCP Gateway deployed successfully!
          
          Internal URL: http://{{ project_name }}-docker-mcp-gateway.{{ namespace }}.svc.cluster.local:{{ docker_mcp_gateway.port }}
          External URL: {{ 'https://' + docker_mcp_gateway.tunnel_hostname + '.' + docker_mcp_gateway.domain_suffix if docker_mcp_gateway.domain_suffix else 'Configure Cloudflare Tunnel for external access' }}
          
          Next steps:
          1. Configure Cloudflare Tunnel to route {{ docker_mcp_gateway.tunnel_hostname }}.{{ docker_mcp_gateway.domain_suffix }} to the service
          2. Test connectivity: kubectl port-forward -n {{ namespace }} svc/{{ project_name }}-docker-mcp-gateway {{ docker_mcp_gateway.port }}:{{ docker_mcp_gateway.port }}
          3. Access locally: http://localhost:{{ docker_mcp_gateway.port }}/health